import os
import asyncio
import nest_asyncio
import json
import asyncpg
import time
import datetime
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from survey_template import survey_title, questions

# ‚úÖ –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É
nest_asyncio.apply()

# ‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
TZ_KYIV = pytz.timezone("Europe/Kiev")

# ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# ‚úÖ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMINS = {479486294}

# ‚úÖ –¢–µ—Ä–º—ñ–Ω –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–µ—à—É (24 –≥–æ–¥–∏–Ω–∏)
CACHE_EXPIRATION_TIME = 24 * 60 * 60  # 86400 —Å–µ–∫—É–Ω–¥

# ‚úÖ –ß–∞—Å –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É (03:00 GMT+3)
CACHE_CLEANUP_HOUR = 3  

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def connect_to_db():
    try:
        return await asyncpg.create_pool(DATABASE_URL)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        return None

# ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
async def initialize_db(pool):
    async with pool.acquire() as conn:
        try:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS chat_history (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    message TEXT NOT NULL,
                    is_user BOOLEAN NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü—è chat_history –≥–æ—Ç–æ–≤–∞!")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {e}")

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –±–∞–∑—É
async def save_message_to_db(pool, user_id, message, is_user=True):
    async with pool.acquire() as conn:
        try:
            await conn.execute(
                """
                INSERT INTO chat_history (user_id, message, is_user, timestamp)
                VALUES ($1, $2, $3, NOW());
                """,
                user_id, message, is_user
            )
            print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î: {message}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ë–î: {e}")

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É –∑ –∫–µ—à–µ–º –∞–±–æ –±–∞–∑–∏
async def get_chat_history_cached(context: ContextTypes.DEFAULT_TYPE, pool, user_id):
    if "chat_history" not in context.chat_data:
        context.chat_data["chat_history"] = {}

    if user_id in context.chat_data["chat_history"]:
        history_data = context.chat_data["chat_history"][user_id]
        if time.time() - history_data["timestamp"] < CACHE_EXPIRATION_TIME:
            return history_data["history"]

    # –Ø–∫—â–æ –∫–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∞–±–æ –π–æ–≥–æ –Ω–µ–º–∞—î ‚Äì –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –∑ PostgreSQL
    async with pool.acquire() as conn:
        try:
            rows = await conn.fetch("""
                SELECT message, is_user FROM chat_history
                WHERE user_id = $1
                ORDER BY timestamp ASC;
            """, user_id)
            context.chat_data["chat_history"][user_id] = {"history": rows, "timestamp": time.time()}
            return rows
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É: {e}")
            return []

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —â–æ–¥–Ω—è –æ 03:00 (GMT+3)
async def clear_old_cache(context: ContextTypes.DEFAULT_TYPE):
    if "chat_history" in context.chat_data:
        current_time = time.time()
        before_cleaning = len(context.chat_data["chat_history"])
        context.chat_data["chat_history"] = {
            user_id: data for user_id, data in context.chat_data["chat_history"].items()
            if current_time - data["timestamp"] < CACHE_EXPIRATION_TIME
        }
        after_cleaning = len(context.chat_data["chat_history"])
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ –∫–µ—à: {before_cleaning - after_cleaning} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–µ—à—É
async def cache_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–µ—à—É.")
        return

    if "chat_history" not in context.chat_data or not context.chat_data["chat_history"]:
        await update.message.reply_text("üìÇ –ö–µ—à –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")
        return

    total_users = len(context.chat_data["chat_history"])
    await update.message.reply_text(f"üìä **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –∫–µ—à—ñ:** {total_users}")

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
async def clear_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó.")
        return

    user_id = update.message.chat_id
    pool = context.bot_data["db_pool"]

    if "chat_history" in context.chat_data:
        context.chat_data["chat_history"].pop(user_id, None)

    async with pool.acquire() as conn:
        try:
            await conn.execute("DELETE FROM chat_history WHERE user_id = $1;", user_id)
            await update.message.reply_text("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ!")
            print(f"‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –±—É–ª–∞ –æ—á–∏—â–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó.")

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message.text
        user_id = update.message.chat_id
        pool = context.bot_data["db_pool"]

        print(f"üü¢ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_id}: {user_message}")

        await save_message_to_db(pool, user_id, user_message, is_user=True)

        history = await get_chat_history_cached(context, pool, user_id)
        messages = [{"role": "system", "content": "–¢–∏ –î–æ—Ä–æ—Å–ª–∏–π —Ç–∞ –º—É–¥—Ä–∏–π —á–æ–ª–æ–≤—ñ–∫, —Ç–≤–æ—î —ñ–º º—è –î–∂–æ–Ω..."}]

        for record in history:
            role = "user" if record["is_user"] else "assistant"
            messages.append({"role": role, "content": record["message"]})

        messages.append({"role": "user", "content": user_message})

        await save_message_to_db(pool, user_id, user_message, is_user=True)

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
        await ask_next_question(update, context)

    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞—á—ñ –∞–Ω–∫–µ—Ç–∏
async def send_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data='start_survey')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É" –¥–ª—è –ø–æ—á–∞—Ç–∫—É:', reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É" –¥–ª—è –ø–æ—á–∞—Ç–∫—É:', reply_markup=reply_markup)
    print("üìã –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏")

# ‚úÖ –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—á–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'start_survey':
        await query.edit_message_text(text=f"{survey_title}\n\n–ê–Ω–∫–µ—Ç–∞ –ø–æ—á–∞–ª–∞—Å—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:")
        context.user_data['survey_step'] = 0
        context.user_data['correct_answers'] = 0
        context.user_data['questions'] = questions
        context.user_data['answers'] = []
        print("üìã –ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∫–µ—Ç–∏")
        await ask_next_question(update, context)
    elif query.data == 'kursant':
        await query.edit_message_text(text="ü´°–í—ñ—Ç–∞—é —Ç–µ–±–µ –∫—É—Ä—Å–∞–Ω—Ç–µ! –î–∞–≤–∞–π –≤–∏–∑–Ω–∞—á–∏–º–æ —Ç–≤—ñ–π –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω—å —ñ –ø—Ä–æ–π–¥–µ–º–æ –ø—Ä–æ—Å—ÇÔøΩ[...]")
        await send_survey(update, context)
    elif query.data == 'instructor':
        await query.edit_message_text(text="ü´°–í—ñ—Ç–∞—é —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ! –î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.")
    else:
        await ask_next_question(update, context)

# ‚úÖ –ó–∞–ø–∏—Ç –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_chat.id
    pool = context.bot_data["db_pool"]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if 'survey_step' in context.user_data and context.user_data['survey_step'] > 0:
        user_response = query.data.split('_')[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞
        if 'last_answer' in context.user_data and context.user_data['last_answer'] == user_response:
            return
        
        correct_answers = context.user_data['questions'][context.user_data['survey_step'] - 1]['correct']
        if user_response in correct_answers:
            context.user_data['correct_answers'] += 1
        context.user_data['answers'].append(user_response)
        context.user_data['last_answer'] = user_response
        
        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
        await query.edit_message_text(text=f"–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: {correct_answers}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if context.user_data['survey_step'] < len(context.user_data['questions']):
        question_data = context.user_data['questions'][context.user_data['survey_step']]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        if 'depends_on' in question_data and question_data['depends_on']:
            dependency = question_data['depends_on']
            if context.user_data['answers'][dependency['question_index']] != dependency['correct_value']:
                context.user_data['survey_step'] += 1
                await ask_next_question(update, context)
                return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        if 'options' not in question_data or not question_data['options']:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–º–∏–ª–∫–∞: –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –º–∞—î –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
            context.user_data['survey_step'] += 1
            await ask_next_question(update, context)
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—É–∫–≤–µ–Ω–Ω—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        option_identifiers = ["A", "B", "C", "D", "E", "F"]
        keyboard = []
        for i, option in enumerate(question_data['options']):
            option_text = f"{option_identifiers[i]}. {option}"
            keyboard.append([InlineKeyboardButton(option_identifiers[i], callback_data=f"{context.user_data['survey_step']}_{option_identifiers[i]}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"{question_data['question']}\n\n" + "\n".join([f"{option_identifiers[i]}. {opt}" for i, opt in enumerate(question_data['options'])]), reply_markup=reply_markup)
        context.user_data['survey_step'] += 1
    else:
        # –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {context.user_data['correct_answers']} –∑ {len(context.user_data['questions'])} –ø–∏—Ç–∞–Ω—å.")
        context.user_data.clear()
        
# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–∏—Ç–∞–Ω–Ω—è
async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_chat.id
    pool = context.bot_data["db_pool"]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if 'survey_step' in context.user_data and context.user_data['survey_step'] > 0:
        user_response = query.data.split('_')[1]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞
        if 'last_answer' in context.user_data and context.user_data['last_answer'] == user_response:
            return
        
        correct_answers = context.user_data['questions'][context.user_data['survey_step'] - 1]['correct']
        if user_response in correct_answers:
            context.user_data['correct_answers'] += 1
        context.user_data['answers'].append(user_response)
        context.user_data['last_answer'] = user_response

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if context.user_data['survey_step'] < len(context.user_data['questions']):
        question_data = context.user_data['questions'][context.user_data['survey_step']]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        if 'depends_on' in question_data and question_data['depends_on']:
            dependency = question_data['depends_on']
            if context.user_data['answers'][dependency['question_index']] != dependency['correct_value']:
                context.user_data['survey_step'] += 1
                await ask_next_question(update, context)
                return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        if 'options' not in question_data or not question_data['options']:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–º–∏–ª–∫–∞: –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –º–∞—î –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
            context.user_data['survey_step'] += 1
            await ask_next_question(update, context)
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –±—É–∫–≤–µ–Ω–Ω—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –¥–ª—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        option_identifiers = ["A", "B", "C", "D", "E", "F"]
        keyboard = []
        for i, option in enumerate(question_data['options']):
            option_text = f"{option_identifiers[i]}. {option}"
            keyboard.append([InlineKeyboardButton(option_identifiers[i], callback_data=f"{context.user_data['survey_step']}_{option_identifiers[i]}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"{question_data['question']}\n\n" + "\n".join([f"{option_identifiers[i]}. {opt}" for i, opt in enumerate(question_data['options'])]), reply_markup=reply_markup)
        context.user_data['survey_step'] += 1
    else:
        # –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {context.user_data['correct_answers']} –∑ {len(context.user_data['questions'])} –ø–∏—Ç–∞–Ω—å.")
        context.user_data.clear()

# ‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å–∞–Ω—Ç", callback_data='kursant')],
        [InlineKeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", callback_data='instructor')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('ü´°–ü—Ä–∏–≤—ñ—Ç –ö–æ–∑–∞—á–µ! –î–∞–≤–∞–π –≤–∏–∑–Ω–∞—á–∏–º–æ—Å—å –∑ —Ç–∏–º —Ö—Ç–æ —Ç–∞–∫–∏–π!?', reply_markup=reply_markup)

# ‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def start_bot():
    db_pool = await connect_to_db()
    await initialize_db(db_pool)

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.bot_data["db_pool"] = db_pool
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cache_status", cache_status))
    application.add_handler(CommandHandler("clear_history", clear_history))
    application.add_handler(CommandHandler("survey", send_survey))  # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /survey
    application.add_handler(CallbackQueryHandler(button))  # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.job_queue.run_daily(clear_old_cache, time=datetime.time(hour=3, tzinfo=TZ_KYIV))

    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Stop, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏.")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(start_bot())
